<div id="loadingSpinner" class="text-center my-5 py-5">
    <div class="spinner-grow text-primary" style="width: 3rem; height: 3rem;" role="status">
        <span class="visually-hidden">Загрузка...</span>
    </div>
    <p class="mt-3 text-muted">Загрузка компьютеров...</p>
</div>

<div id="alertContainer" class="container mt-3"></div>

<div class="container-fluid py-4" id="mainContent" style="display: none;">

     <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="mb-0">
            <i class="bi bi-pc-display me-2"></i>Управление компьютерами
        </h1>
    </div>

    <div class="card shadow-sm">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table id="computerTable" class="table table-hover align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="ps-4">ID</th>
                            <th>Основные компоненты</th>
                            <th>Статус</th>
                            <th class="text-end pe-4">Действия</th>
                        </tr>
                    </thead>
                    <tbody id="computerTableBody">
                        <!-- Данные будут загружаться динамически -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно подтверждения удаления -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">
                    <i class="bi bi-exclamation-triangle me-2"></i>Подтверждение удаления
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body" id="deleteConfirmBody">
                Вы действительно хотите удалить этот компьютер?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">
                    <span class="spinner-border spinner-border-sm d-none" id="deleteSpinner"></span>
                    <span id="deleteBtnText">Удалить</span>
                </button>
            </div>
        </div>
    </div>
</div>


<script>
    // Глобальные переменные
    let computers = [];
    let currentDeleteId = null;
    let deleteModal = null;

    document.addEventListener('DOMContentLoaded', function() {
        // Инициализация модального окна удаления
        deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
        
        // Загрузка данных
        loadComputers();
        
        // Обработчик кнопки подтверждения удаления
        document.getElementById('confirmDeleteBtn').addEventListener('click', confirmDelete);
    });

    // Загрузка списка компьютеров
    async function loadComputers() {
        try {
            showLoading(true);
            const response = await fetch('https://localhost:5001/api/computer', {
                credentials: 'include'
            });
            
            if (!response.ok) throw new Error(`Ошибка загрузки: ${response.status}`);
            
            computers = await response.json();
            renderComputers(computers);
        } catch (error) {
            console.error('Ошибка:', error);
            showError('Не удалось загрузить компьютеры: ' + error.message);
        } finally {
            showLoading(false);
        }
    }

    // Отображение компьютеров в таблице
    function renderComputers(computersToRender) {
        const tableBody = document.getElementById('computerTableBody');
        tableBody.innerHTML = '';

        if (computersToRender.length === 0) {
            tableBody.innerHTML = `
                <tr>
                    <td colspan="4" class="text-center py-5 text-muted">
                        <i class="bi bi-pc display-4 opacity-50"></i>
                        <p class="mt-3">Компьютеры не найдены</p>
                    </td>
                </tr>`;
            return;
        }

        computersToRender.forEach(computer => {
            tableBody.appendChild(createComputerRow(computer));
        });
    }

    // Создание строки таблицы для компьютера
    function createComputerRow(computer) {
        const mainRow = document.createElement('tr');
        mainRow.className = 'cursor-pointer';
        mainRow.setAttribute('data-bs-toggle', 'collapse');
        mainRow.setAttribute('data-bs-target', `#details-${computer.id}`);
        mainRow.innerHTML = `
            <td class="ps-4">${computer.id}</td>
            <td>
                <div>${escapeHtml(getMainComponentsText(computer))}</div>
                <small class="text-muted">+${getAdditionalComponentsCount(computer)} компонентов</small>
            </td>
            <td>${getStatusBadge(computer.computerStatus)}</td>
            <td class="text-end pe-4">
                <div class="btn-group btn-group-sm" onclick="event.stopPropagation()">
                    <button class="btn btn-outline-success" title="Подтвердить" 
                        onclick="confirmComputer(${computer.id})">
                        <i class="bi bi-check-circle"></i>
                    </button>
                    <button class="btn btn-outline-danger" title="Удалить" 
                        onclick="showDeleteModal(${computer.id}, '${escapeHtml(getMainComponentsText(computer))}')">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </td>`;

        const detailsRow = document.createElement('tr');
        detailsRow.className = 'collapse details-row';
        detailsRow.id = `details-${computer.id}`;
        detailsRow.innerHTML = `
            <td colspan="4" class="bg-light">
                <div class="p-3">
                    <div class="row">
                        <div class="col-md-4">
                            <p><strong>Процессор:</strong> ${escapeHtml(computer.processorName || 'Не указан')}</p>
                            <p><strong>Материнская плата:</strong> ${escapeHtml(computer.motherboardName || 'Не указана')}</p>
                            <p><strong>ОЗУ:</strong> ${escapeHtml(computer.ramName || 'Не указана')}</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>ОС:</strong> ${escapeHtml(computer.ocName || 'Не указана')}</p>
                            <p><strong>Накопитель:</strong> ${escapeHtml(computer.memoryDiskName || 'Не указан')}</p>
                            <p><strong>Блок питания:</strong> ${escapeHtml(computer.powerUnitName || 'Не указан')}</p>
                        </div>
                        <div class="col-md-4">
                            <p><strong>Видеокарта:</strong> ${escapeHtml(computer.videoCardName || 'Не указана')}</p>
                            <p><strong>Мышь:</strong> ${escapeHtml(computer.mouseName || 'Не указана')}</p>
                            <p><strong>Клавиатура:</strong> ${escapeHtml(computer.keyboardName || 'Не указана')}</p>
                            <p><strong>Монитор:</strong> ${escapeHtml(computer.screenName || 'Не указан')}</p>
                        </div>
                    </div>
                </div>
            </td>`;

        const fragment = document.createDocumentFragment();
        fragment.appendChild(mainRow);
        fragment.appendChild(detailsRow);
        return fragment;
    }

    // Показать модальное окно удаления
    function showDeleteModal(id, name) {
        currentDeleteId = id;
        document.getElementById('deleteConfirmBody').innerHTML = `
            Вы действительно хотите удалить компьютер <strong>#${id}</strong>?
            <div class="mt-2">Компоненты: <strong>${name}</strong></div>`;
        deleteModal.show();
    }

    // Подтверждение удаления
    async function confirmDelete() {
        const deleteBtn = document.getElementById('confirmDeleteBtn');
        const spinner = document.getElementById('deleteSpinner');
        const btnText = document.getElementById('deleteBtnText');
        
        try {
            deleteBtn.disabled = true;
            spinner.classList.remove('d-none');
            btnText.textContent = 'Удаление...';
            
            const response = await fetch(`https://localhost:5001/api/computer/${currentDeleteId}`, {
                method: 'DELETE',
                credentials: 'include'
            });
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Ошибка при удалении');
            }
            
            showAlert('Компьютер успешно удален', 'success');
            deleteModal.hide();
            await loadComputers();
        } catch (error) {
            showAlert(`Ошибка при удалении: ${error.message}`, 'danger');
        } finally {
            deleteBtn.disabled = false;
            spinner.classList.add('d-none');
            btnText.textContent = 'Удалить';
        }
    }

    // Вспомогательные функции
    function getMainComponentsText(computer) {
        const components = [
            computer.processorName,
            computer.videoCardName,
            computer.ramName
        ].filter(c => c);
        return components.join(', ') || 'Компоненты не указаны';
    }

    function getAdditionalComponentsCount(computer) {
        const components = [
            computer.motherboardName,
            computer.ocName,
            computer.memoryDiskName,
            computer.powerUnitName,
            computer.mouseName,
            computer.keyboardName,
            computer.screenName
        ].filter(c => c);
        return components.length;
    }

    function getStatusBadge(status) {
        const statusMap = {
            0: { class: 'bg-warning text-dark', text: 'Ожидает подтверждения' },
            1: { class: 'bg-success text-white', text: 'Подтвержден' }
        };
        const statusInfo = statusMap[status] || statusMap[0];
        return `<span class="badge ${statusInfo.class}">${statusInfo.text}</span>`;
    }

    function escapeHtml(unsafe) {
        return unsafe
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    function showLoading(show) {
        document.getElementById('loadingSpinner').style.display = show ? 'block' : 'none';
        document.getElementById('mainContent').style.display = show ? 'none' : 'block';
    }

    function showAlert(message, type = 'success') {
        const alertContainer = document.getElementById('alertContainer');
        alertContainer.innerHTML = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                <i class="bi ${type === 'success' ? 'bi-check-circle' : 'bi-exclamation-triangle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>`;
        
        setTimeout(() => {
            const alert = bootstrap.Alert.getOrCreateInstance(alertContainer.querySelector('.alert'));
            alert.close();
        }, 5000);
    }

    function showError(message) {
        showAlert(message, 'danger');
    }

    // Другие функции
    async function confirmComputer(id) {
        try {
            const response = await fetch(`https://localhost:5001/api/computer/${id}/confirm`, {
                method: 'PUT',
                credentials: 'include'
            });
            
            if (!response.ok) throw new Error('Ошибка подтверждения');
            
            showAlert('Компьютер успешно подтвержден');
            await loadComputers();
        } catch (error) {
            showError(error.message);
        }
    }

    function editComputer(id) {
        console.log('Редактирование компьютера', id);
        // window.location.href = `/computers/edit/${id}`;
    }
</script>